Given the following function prototype, write 10 C functions (compilation units) that can be optimized at compile-time using the optimization technique specified.

The function prototype is designed to allow for inputs and outputs of multiple types. The function outputs are returned using the final three parameters. You do not need to use all of the input parameters nor all of the output parameters.

For each function, explain the optimization that could be performed.

The ability for the compiler to optimize the generated code should not depend on the function being called with any particular inputs, but the outputs must depend in some way on the function inputs. In particular, all optimizations should be possible within the context of the code that you generate.

- The functions should be as simple as possible.
- The functions should vary in structure, particularly how and where the optimization technique can be applied.
- Do not include any comments in the code.
- The optimizations should not depend on the input variables having constant values.
- Do not depend on functions outside of the compilation unit, including those from the standard library. Do not import any header files.
- Do not use helper functions unless absolutely necessary. Any helper functions you do use should be marked static.
- Do not actually make the optimizations. Your job is to generate unoptimized code that could later be optimized.
- Avoid integer division.
- Avoid nested loops.
- Avoid the % (modulo) operator.

Function prototype:
```void customFunction(int int1, int int2, 
					double double1, double double2, 
					int *outInt, double *outDouble);```

Optimization technique: loop unrolling

After generating, write the functions to a zip file with the following structure.  "technique.txt" should contain only the exact optimization technique listed above.

21/compilation_unit.c
21/technique.txt
22/compilation_unit.c
22/technique.txt
…

---

Output 10 more compilation units where the optimization opportunity is less obvious. Remember, the optimizations should not depend on the functions being called with constant input values.

After generating, add the functions to the zip file with the following structure:

31/compilation_unit.c
31/technique.txt
32/compilation_unit.c
32/technique.txt
…

---

Output five more compilation units where the optimization opportunity is even less obvious. The opportunity should be spread across multiple statements in the function. Remember, the optimizations should not depend on the functions being called with constant input values.

After generating, add the functions to the zip file with the following structure:

71/compilation_unit.c
71/technique.txt
72/compilation_unit.c
72/technique.txt
…
